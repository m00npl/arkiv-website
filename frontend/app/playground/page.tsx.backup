'use client'

import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { CodePlayground } from '@/components/ui/CodePlayground';
import { ArrowLeft, Code2, Rocket, Database, Search, Activity, Layers } from 'lucide-react';
import Link from 'next/link';
import { pythonExamples } from '@/data/python-examples';
import { ThemeProvider, useTheme } from '@/components/providers/ThemeProvider';
import ArkivHeader from '@/components/layout/ArkivHeader';

const examples = {
  connect: {
    title: 'Connect with Ethers',
    description: 'Connect to Arkiv using ethers.js',
    code: `// Connect using ethers.js
// Note: ethers is already imported in the playground environment

// Setup provider and wallet
const provider = new ethers.JsonRpcProvider(
  "https://kaolin.hoodi.arkiv.network/rpc"
);

// Create wallet from private key
const privateKey = mockPrivateKey; // Using mock key for playground
const wallet = new ethers.Wallet(privateKey, provider);

// Get wallet information
const address = await wallet.getAddress();
const balance = await provider.getBalance(address);

console.log("Connected to Arkiv testnet");
console.log("Wallet address:", address);
console.log("Balance:", ethers.formatEther(balance), "ETH");

// Get network info
const network = await provider.getNetwork();
console.log("Chain ID:", network.chainId.toString());
console.log("Network name:", network.name === "unknown" ? "Arkiv testnet" : (network.name || "Arkiv testnet"));`
  },
  
  create: {
    title: 'Smart Contract Interaction',
    description: 'Interact with Arkiv smart contract using ethers',
    code: `// Interact with Arkiv smart contract
// Note: ethers is already imported in the playground environment

// Setup provider and wallet
const provider = new ethers.JsonRpcProvider(
  "https://kaolin.hoodi.arkiv.network/rpc"
);
const wallet = new ethers.Wallet(mockPrivateKey, provider);

// Arkiv contract ABI (simplified example)
const abi = [
  "function createEntity(bytes data, uint256 btl, tuple(string key, string value)[] stringAnnotations) returns (bytes32)",
  "function getEntity(bytes32 entityKey) view returns (bytes, uint256, tuple(string, string)[])",
  "event EntityCreated(bytes32 indexed entityKey, address indexed owner, uint256 expirationBlock)"
];

// Contract address (example - would need actual deployed address)
const contractAddress = "0x0000000000000000000000000000000000000000";
const contract = new ethers.Contract(contractAddress, abi, wallet);

// Example: Create entity transaction
const entityData = ethers.toUtf8Bytes(JSON.stringify({
  message: "Hello from ethers.js!",
  timestamp: Date.now()
}));

const btl = 300; // Block-to-live
const annotations = [
  { key: "type", value: "message" },
  { key: "author", value: "ethers-demo" }
];

console.log("Preparing to create entity...");
console.log("Data:", ethers.toUtf8String(entityData));
console.log("BTL:", btl);
console.log("Annotations:", annotations);

// Note: In playground, actual transaction would require deployed contract
console.log("");
console.log("⚠️ Contract interaction example - requires deployed contract address");`
  },
  
  query: {
    title: 'Read Blockchain Data',
    description: 'Query blockchain data using ethers',
    code: `// Query blockchain data with ethers
// Note: ethers is already imported in the playground environment

const provider = new ethers.JsonRpcProvider(
  "https://kaolin.hoodi.arkiv.network/rpc"
);

// Get current block information
const blockNumber = await provider.getBlockNumber();
const block = await provider.getBlock(blockNumber);

console.log("Current block number:", blockNumber);
console.log("Block timestamp:", new Date(block.timestamp * 1000).toISOString());
console.log("Block hash:", block.hash);
console.log("Transactions in block:", block.transactions.length);

// Get transaction count for an address
const address = "0x4393CE3C46f74CC5c30809b122acd69EE74aC532";
const txCount = await provider.getTransactionCount(address);
console.log("");
console.log("Transaction count for", address.slice(0, 10) + "...:", txCount);

// Query logs/events (example filter)
const filter = {
  fromBlock: blockNumber - 100,
  toBlock: blockNumber,
  topics: [] // Add specific event topics here
};

try {
  const logs = await provider.getLogs(filter);
  console.log("");
  console.log("Found", logs.length, "logs in last 100 blocks");
  
  if (logs.length > 0) {
    console.log("Sample log:", {
      address: logs[0].address,
      blockNumber: logs[0].blockNumber,
      topics: logs[0].topics.length + " topics"
    });
  }
} catch (error) {
  console.log("");
  console.log("Log query example (may require specific event filters)");
}`
  },
  
  update: {
    title: 'Send Transaction',
    description: 'Send a transaction using ethers',
    code: `// Send transaction with ethers
// Note: ethers is already imported in the playground environment

const provider = new ethers.JsonRpcProvider(
  "https://kaolin.hoodi.arkiv.network/rpc"
);
const wallet = new ethers.Wallet(mockPrivateKey, provider);

// Get current gas price
const feeData = await provider.getFeeData();
console.log("Current gas price:", ethers.formatUnits(feeData.gasPrice, "gwei"), "gwei");

// Prepare transaction
const tx = {
  to: "0x4393CE3C46f74CC5c30809b122acd69EE74aC532", // Example recipient
  value: ethers.parseEther("0.001"), // Send 0.001 ETH
  data: "0x", // No data for simple transfer
  gasLimit: 21000, // Standard gas limit for ETH transfer
  gasPrice: feeData.gasPrice
};

console.log("");
console.log("Transaction details:");
console.log("To:", tx.to);
console.log("Value:", ethers.formatEther(tx.value), "ETH");
console.log("Gas limit:", tx.gasLimit);

// Estimate gas
try {
  const estimatedGas = await wallet.estimateGas(tx);
  console.log("Estimated gas:", estimatedGas.toString());
  
  // Calculate transaction cost
  const txCost = estimatedGas * feeData.gasPrice;
  console.log("Estimated cost:", ethers.formatEther(txCost), "ETH");
} catch (error) {
  console.log("Gas estimation example (requires sufficient balance)");
}

// Sign transaction (without sending)
const signedTx = await wallet.signTransaction(tx);
console.log("");
console.log("Signed transaction (not sent):");
console.log(signedTx.slice(0, 100) + "...");

console.log("");
console.log("⚠️ Transaction not sent in playground environment");`
  },
  
  events: {
    title: 'Event Listening',
    description: 'Listen to blockchain events with ethers',
    code: `// Listen to events with ethers
// Note: ethers is already imported in the playground environment

const provider = new ethers.JsonRpcProvider(
  "https://kaolin.hoodi.arkiv.network/rpc"
);

console.log("=== Event Listening Example ===");
console.log("");
console.log("⚠️  NOTE: Real-time WebSocket event listening is limited in playground");
console.log("    This example shows event filtering and historical queries");
console.log("");

// Get current block for reference
const currentBlock = await provider.getBlockNumber();
console.log("Current block:", currentBlock);

// Example: ERC20 Transfer event filter
// In a real scenario, you'd use a specific contract address
const transferEventSignature = ethers.id("Transfer(address,address,uint256)");
console.log("");
console.log("Transfer event topic:", transferEventSignature);

// Create a filter for recent events
const filter = {
  fromBlock: Math.max(0, currentBlock - 1000),
  toBlock: currentBlock,
  topics: [transferEventSignature]
};

console.log("");
console.log("Searching for Transfer events in last 1000 blocks...");

try {
  const logs = await provider.getLogs(filter);
  console.log("Found", logs.length, "Transfer events");
  
  if (logs.length > 0) {
    // Show first event details
    const log = logs[0];
    console.log("");
    console.log("Sample event:");
    console.log("  Block:", log.blockNumber);
    console.log("  Transaction:", log.transactionHash.slice(0, 10) + "...");
    console.log("  Contract:", log.address);
  }
} catch (error) {
  console.log("No Transfer events found (this is normal on test networks)");
}

// Listen for new blocks (polling mode)
console.log("");
console.log("Monitoring new blocks...");
const startBlock = await provider.getBlockNumber();
console.log("Starting from block:", startBlock);

// Simulate listening for 3 blocks
let blocksChecked = 0;
const checkInterval = setInterval(async () => {
  const newBlock = await provider.getBlockNumber();
  if (newBlock > startBlock + blocksChecked) {
    blocksChecked++;
    console.log("New block detected:", newBlock);
    
    if (blocksChecked >= 3) {
      clearInterval(checkInterval);
      console.log("");
      console.log("Stopped monitoring after 3 blocks");
    }
  }
}, 2000); // Check every 2 seconds

// Wait for monitoring to complete
await new Promise(resolve => setTimeout(resolve, 8000));

console.log("");
console.log("=== Event Listening Complete ===");
console.log("");
console.log("For real-time WebSocket events, use:");
console.log('provider.on("block", (blockNumber) => { ... })');
console.log('provider.on("pending", (tx) => { ... })');`
  },
  
  metamask: {
    title: 'MetaMask Integration',
    description: 'Use MetaMask wallet with Arkiv',
    code: `// MetaMask integration example
// First, click "Connect MetaMask" button above
// Then run this code to use your wallet

// Check if MetaMask is connected
if (isMetaMaskConnected) {
  console.log("✅ MetaMask is connected!");
  console.log("Your wallet address:", userWalletAddress);
  
  // When MetaMask is connected, you can use ethers with the provider
  const provider = new ethers.JsonRpcProvider(
    "https://kaolin.hoodi.arkiv.network/rpc"
  );
  
  // Get wallet info
  const balance = await provider.getBalance(userWalletAddress);
  console.log("Balance:", ethers.formatEther(balance), "ETH");
  
  // Get transaction count
  const txCount = await provider.getTransactionCount(userWalletAddress);
  console.log("Transaction count:", txCount);
  
  // Get current block
  const blockNumber = await provider.getBlockNumber();
  console.log("Current block:", blockNumber);
  
  console.log("");
  console.log("🔗 Arkiv Connection");
  console.log("To use Arkiv with your wallet:");
  console.log("1. Sign transactions in MetaMask when prompted");
  console.log("2. Your wallet will pay for gas fees");
  console.log("3. All operations will be from your address");
  
  // Note: In the sandbox, we can't actually sign transactions
  // But in a real dApp, you would use:
  // const signer = await provider.getSigner();
  // And then use signer for transactions
  
} else {
  console.log("❌ MetaMask not connected");
  console.log("Please click 'Connect MetaMask' button above first");
  console.log("");
  console.log("Using mock wallet for demonstration:");
  
  const provider = new ethers.JsonRpcProvider(
    "https://kaolin.hoodi.arkiv.network/rpc"
  );
  const wallet = new ethers.Wallet(mockPrivateKey, provider);
  const address = await wallet.getAddress();
  console.log("Mock wallet address:", address);
}`
  },
  
  batch: {
    title: 'Batch Operations',
    description: 'Perform multiple operations efficiently',
    code: `// Initialize client first
const privateKeyHex = mockPrivateKey;
const privateKey = new Uint8Array(
  privateKeyHex.match(/.{1,2}/g)?.map((byte) => parseInt(byte, 16)) || []
);

const client = await createClient(
  60138453033, // Arkiv testnet Chain ID
  new Tagged("privatekey", privateKey),
  "https://kaolin.hoodi.arkiv.network/rpc",
  "wss://kaolin.hoodi.arkiv.network/rpc/ws"
);

// Create multiple entities in a single transaction
const batchEntities = [];
const batchId = Date.now().toString();

for (let i = 0; i < 5; i++) {
  batchEntities.push({
    data: new TextEncoder().encode(JSON.stringify({
      message: "Batch item #" + (i + 1),
      batchId: batchId,
      index: i
    })),
    btl: 200,
    stringAnnotations: [
      new Annotation("type", "batch-item"),
      new Annotation("batchId", batchId),
      new Annotation("index", i.toString())
    ],
    numericAnnotations: [
      new Annotation("sequence", i + 1) // Start from 1
    ]
  });
}

console.log("Creating batch of", batchEntities.length, "entities...");
const receipts = await client.createEntities(batchEntities);

console.log("Batch created successfully!");
receipts.forEach((receipt, i) => {
  console.log("  Item " + (i + 1) + ": " + receipt.entityKey.slice(0, 10) + "...");
});

// Query the batch
const batchQuery = 'batchId = "' + batchId + '"';
const batchResults = await client.queryEntities(batchQuery);
console.log("");
console.log("Queried batch: found " + batchResults.length + " entities");`
  },
  
  fullExample: {
    title: 'Full Example',
    description: 'Complete workflow: connect, create, query, update, and delete',
    code: `// Complete Arkiv workflow example
console.log("=== GOLEM DB FULL EXAMPLE ===");
console.log("");

// Step 1: Initialize and connect
console.log("1. Connecting to Arkiv...");
const privateKeyHex = mockPrivateKey;
const privateKey = new Uint8Array(
  privateKeyHex.match(/.{1,2}/g)?.map((byte) => parseInt(byte, 16)) || []
);

const client = await createClient(
  60138453033, // Arkiv testnet Chain ID
  new Tagged("privatekey", privateKey),
  "https://kaolin.hoodi.arkiv.network/rpc",
  "wss://kaolin.hoodi.arkiv.network/rpc/ws"
);

const ownerAddress = await client.getOwnerAddress();
console.log("✅ Connected! Address:", ownerAddress);
console.log("");

// Step 2: Create entities
console.log("2. Creating entities...");
const entities = [];
for (let i = 1; i <= 3; i++) {
  entities.push({
    data: new TextEncoder().encode(JSON.stringify({
      id: i,
      name: "Item " + i,
      category: i % 2 === 0 ? "even" : "odd",
      timestamp: Date.now()
    })),
    btl: 500, // ~17 minutes lifetime
    stringAnnotations: [
      new Annotation("type", "demo-item"),
      new Annotation("category", i % 2 === 0 ? "even" : "odd")
    ],
    numericAnnotations: [
      new Annotation("id", i),
      new Annotation("priority", i * 10)
    ]
  });
}

const createReceipts = await client.createEntities(entities);
console.log("✅ Created " + createReceipts.length + " entities");
createReceipts.forEach((receipt, i) => {
  console.log("  - Entity " + (i + 1) + ": " + receipt.entityKey.slice(0, 16) + "...");
});
console.log("");

// Step 3: Query entities
console.log("3. Querying entities...");
const query = 'type = "demo-item" && category = "odd"';
console.log("Query:", query);

const results = await client.queryEntities(query);
console.log("✅ Found " + results.length + " matching entities");

results.forEach((entity) => {
  const data = JSON.parse(new TextDecoder().decode(entity.storageValue));
  console.log("  - ID: " + data.id + ", Name: " + data.name + ", Category: " + data.category);
});
console.log("");

// Step 4: Update an entity
console.log("4. Updating first entity...");
if (createReceipts.length > 0) {
  const entityToUpdate = createReceipts[0].entityKey;
  
  const updateData = {
    entityKey: entityToUpdate,
    data: new TextEncoder().encode(JSON.stringify({
      id: 1,
      name: "Updated Item 1",
      category: "modified",
      updatedAt: Date.now()
    })),
    btl: 1000, // Extend lifetime
    stringAnnotations: [
      new Annotation("type", "demo-item"),
      new Annotation("category", "modified"),
      new Annotation("status", "updated")
    ],
    numericAnnotations: [
      new Annotation("id", 1),
      new Annotation("priority", 100),
      new Annotation("version", 2)
    ]
  };
  
  const updateReceipts = await client.updateEntities([updateData]);
  console.log("✅ Entity updated successfully");
  console.log("  - Key: " + entityToUpdate.slice(0, 16) + "...");
  if (updateReceipts[0].expirationBlock) {
    console.log("  - New expiration: block " + updateReceipts[0].expirationBlock);
  }
}
console.log("");

// Step 5: Query updated entities
console.log("5. Verifying update...");
const verifyQuery = 'type = "demo-item" && status = "updated"';
const updatedResults = await client.queryEntities(verifyQuery);
console.log("✅ Found " + updatedResults.length + " updated entities");
console.log("");

// Step 6: Delete an entity
console.log("6. Deleting entity...");
if (createReceipts.length > 2) {
  const entityToDelete = createReceipts[2].entityKey;
  await client.deleteEntities([entityToDelete]);
  console.log("✅ Entity deleted: " + entityToDelete.slice(0, 16) + "...");
}
console.log("");

// Step 7: Final summary
console.log("7. Final summary:");
const finalQuery = 'type = "demo-item"';
const finalResults = await client.queryEntities(finalQuery);
console.log("  - Remaining entities: " + finalResults.length);
console.log("  - Owner address: " + ownerAddress);
console.log("");
console.log("=== EXAMPLE COMPLETED ===");`
  }
};

function PlaygroundContent() {
  const { theme } = useTheme();
  const [selectedExample, setSelectedExample] = useState<keyof typeof examples>('connect');
  const [customCode, setCustomCode] = useState<string | null>(null);
  const [customTitle, setCustomTitle] = useState<string | null>(null);
  const [customLanguage, setCustomLanguage] = useState<'typescript' | 'python'>('typescript');
  

  useEffect(() => {
    // Check if there's an example from Getting Started
    const storedExample = sessionStorage.getItem('playgroundExample');
    const storedLanguage = sessionStorage.getItem('playgroundLanguage');
    
    if (storedExample) {
      // Set the selected example
      if (storedExample in examples) {
        setSelectedExample(storedExample as keyof typeof examples);
        setCustomCode(null);
        setCustomTitle(null);
      }
      
      // Clear the stored data after using it
      sessionStorage.removeItem('playgroundExample');
      sessionStorage.removeItem('playgroundLanguage');
    } else {
      // Check if there's custom code
      const storedCode = sessionStorage.getItem('playgroundCode');
      const storedTitle = sessionStorage.getItem('playgroundTitle');
      
      if (storedCode) {
        setCustomCode(storedCode);
        setCustomTitle(storedTitle || 'Custom Code');
        setCustomLanguage(storedLanguage === 'python' ? 'python' : 'typescript');
        
        // Clear the stored data after using it
        sessionStorage.removeItem('playgroundCode');
        sessionStorage.removeItem('playgroundLanguage');
        sessionStorage.removeItem('playgroundTitle');
      }
    }
  }, []);

  return (
    <div style={{ backgroundColor: theme.colors.background.primary, color: theme.colors.text.primary, minHeight: '100vh' }}>
      <ArkivHeader />
      <div className="container mx-auto px-4 py-8">

        <div className="mb-8">
          <h1 className="text-4xl font-bold mb-4 flex items-center gap-3">
            <Code2 className="h-10 w-10 text-blue-500" />
            Code Playground
          </h1>
          <p className="text-xl text-white">
            Interactive examples for learning Arkiv SDK. Edit the code and see results instantly!
          </p>
        </div>

        {/* Examples Bar */}
        <Card className="bg-gray-800/50 backdrop-blur-sm border-gray-700 mb-6">
          <CardContent className="p-4">
            <div className="flex items-center gap-4 overflow-x-auto">
              {customCode ? (
                <>
                  <span className="text-sm text-white font-medium whitespace-nowrap">Custom Code:</span>
                  <button
                    onClick={() => {
                      setCustomCode(null);
                      setCustomTitle(null);
                    }}
                    className="px-4 py-2 rounded-lg bg-purple-600 text-white hover:bg-purple-700 transition-all"
                  >
                    ← Back to Examples
                  </button>
                </>
              ) : (
                <>
                  <span className="text-sm text-white font-medium whitespace-nowrap">Examples:</span>
                  <div className="flex gap-2">
                    {Object.entries(examples).map(([key, example]) => (
                      <button
                        key={key}
                        onClick={() => setSelectedExample(key as keyof typeof examples)}
                        className={`px-4 py-2 rounded-lg transition-all whitespace-nowrap ${
                          selectedExample === key
                            ? 'bg-blue-600 text-white shadow-lg shadow-blue-600/25'
                            : 'bg-gray-700/50 text-white hover:bg-gray-700 hover:text-white'
                        }`}
                      >
                        {example.title}
                      </button>
                    ))}
                  </div>
                </>
              )}
            </div>
          </CardContent>
        </Card>

        {/* Code Playground */}
        <Card className="bg-gray-800/50 backdrop-blur-sm border-gray-700">
          <CardContent className="p-6">
            {customCode ? (
              <CodePlayground
                initialCode={customCode}
                initialCodePython={customCode}
                language={customLanguage}
                title={customTitle || 'Custom Code'}
                description="Code from Getting Started guide"
                showLanguageToggle={false}
              />
            ) : (
              <CodePlayground
                initialCode={examples[selectedExample].code}
                initialCodePython={pythonExamples[selectedExample].code}
                language="typescript"
                title={examples[selectedExample].title}
                description={examples[selectedExample].description}
                showLanguageToggle={true}
              />
            )}
          </CardContent>
        </Card>

        {/* Tips below */}
        <Card className="bg-gray-800/50 backdrop-blur-sm border-gray-700 mt-6">
          <CardContent className="p-4">
            <div className="flex items-center gap-8 text-sm text-white">
              <div className="flex items-center gap-2">
                <Rocket className="h-4 w-4 text-yellow-500" />
                <span className="font-medium">Info:</span>
              </div>
              <span>• Edit code and click "Run" to execute</span>
              <span>• Runs in sandboxed environment (limited access)</span>
              <span>• Uses test key (read-only operations)</span>
              <span>• Both TypeScript and Python supported</span>
            </div>
          </CardContent>
        </Card>

        {/* Additional Resources */}
        <div className="mt-8 grid md:grid-cols-3 gap-4">
          <Link href="/getting-started">
            <Card className="bg-gray-800/50 backdrop-blur-sm border-gray-700 hover:bg-gray-800/70 transition-colors cursor-pointer">
              <CardContent className="p-6 flex items-center gap-4">
                <Database className="h-8 w-8 text-blue-500" />
                <div>
                  <h3 className="font-semibold">TypeScript Guide</h3>
                  <p className="text-sm text-white">Full documentation</p>
                </div>
              </CardContent>
            </Card>
          </Link>

          <Link href="/getting-started">
            <Card className="bg-gray-800/50 backdrop-blur-sm border-gray-700 hover:bg-gray-800/70 transition-colors cursor-pointer">
              <CardContent className="p-6 flex items-center gap-4">
                <Activity className="h-8 w-8 text-green-500" />
                <div>
                  <h3 className="font-semibold">Python Guide</h3>
                  <p className="text-sm text-white">Learn Python SDK</p>
                </div>
              </CardContent>
            </Card>
          </Link>

          <a href="https://github.com/golem-base" target="_blank" rel="noopener noreferrer">
            <Card className="bg-gray-800/50 backdrop-blur-sm border-gray-700 hover:bg-gray-800/70 transition-colors cursor-pointer">
              <CardContent className="p-6 flex items-center gap-4">
                <Layers className="h-8 w-8 text-purple-500" />
                <div>
                  <h3 className="font-semibold">GitHub</h3>
                  <p className="text-sm text-white">View source code</p>
                </div>
              </CardContent>
            </Card>
          </a>
        </div>
      </div>

      {/* Footer Section */}
      <section className="px-4 md:px-[60px] py-[64px] bg-[#181EA9]">
        <div className="max-w-[1280px] mx-auto">
          <div className="flex flex-col gap-8">
            {/* Main Footer Content - Single Row */}
            <div className="flex items-start justify-between">
              {/* Large ARKIV Logo */}
              <div className="flex-shrink-0">
                <h2 className="font-brutal text-[60px] md:text-[80px] font-black uppercase text-white leading-tight tracking-wider">
                  [ ARKIV ]
                </h2>
              </div>

              {/* Footer Navigation - Horizontal Layout */}
              <div className="flex gap-16 items-start">
                {/* Developers */}
                <div className="flex flex-col gap-2">
                  <h3 className="font-mono text-sm text-white leading-tight mb-2">Developers</h3>
                  <div className="flex flex-col gap-1">
                    <a href="/docs" className="font-mono text-sm text-white leading-tight hover:text-gray-200 transition-colors">Docs</a>
                    <a href="/getting-started" className="font-mono text-sm text-white leading-tight hover:text-gray-200 transition-colors">Getting Started</a>
                    <a href="/playground" className="font-mono text-sm text-white leading-tight hover:text-gray-200 transition-colors">Playground</a>
                    <a href="https://github.com/arkiv-network" className="font-mono text-sm text-white leading-tight hover:text-gray-200 transition-colors">GitHub</a>
                    <a href="/pdf/ARKIV_Litepaper.pdf" target="_blank" rel="noopener noreferrer" className="font-mono text-sm text-white leading-tight hover:text-gray-200 transition-colors">Litepaper</a>
                    <a href="/whitepaper" className="font-mono text-sm text-white leading-tight hover:text-gray-200 transition-colors">Whitepaper [Soon]</a>
                    <a href="/aips" className="font-mono text-sm text-white leading-tight hover:text-gray-200 transition-colors">AIPs [Soon]</a>
                  </div>
                </div>

                {/* Company */}
                <div className="flex flex-col gap-2">
                  <h3 className="font-mono text-sm text-white leading-tight mb-2">Company</h3>
                  <div className="flex flex-col gap-1">
                    <a href="https://www.golem.network/" className="font-mono text-sm text-white leading-tight hover:text-gray-200 transition-colors">Golem</a>
                    <a href="https://glm.golem.network/" className="font-mono text-sm text-white leading-tight hover:text-gray-200 transition-colors">GLM Token</a>
                    <a href="https://www.golem.network/careers" className="font-mono text-sm text-white leading-tight hover:text-gray-200 transition-colors">Careers</a>
                    <a href="#upcoming-events" className="font-mono text-sm text-white leading-tight hover:text-gray-200 transition-colors">Events</a>
                  </div>
                </div>

                {/* Connect */}
                <div className="flex flex-col gap-2">
                  <h3 className="font-mono text-sm text-white leading-tight mb-2">Connect</h3>
                  <div className="flex flex-col gap-1">
                    <a href="https://twitter.com/arkiv" className="font-mono text-sm text-white leading-tight hover:text-gray-200 transition-colors">X</a>
                    <a href="https://discord.gg/arkiv" className="font-mono text-sm text-white leading-tight hover:text-gray-200 transition-colors">Discord</a>
                  </div>
                </div>

                {/* Legal */}
                <div className="flex flex-col gap-2">
                  <h3 className="font-mono text-sm text-white leading-tight mb-2">Legal</h3>
                  <div className="flex flex-col gap-1">
                    <a href="/legal/privacy" className="font-mono text-sm text-white leading-tight hover:text-gray-200 transition-colors">Privacy Policy</a>
                    <a href="/legal/cookies" className="font-mono text-sm text-white leading-tight hover:text-gray-200 transition-colors">Cookie Policy</a>
                    <a href="/legal/terms" className="font-mono text-sm text-white leading-tight hover:text-gray-200 transition-colors">Terms of Use</a>
                  </div>
                </div>
              </div>
            </div>

            {/* Copyright - Single Row */}
            <div className="flex items-center justify-between pt-4 border-t border-white/10">
              <span className="font-mono text-sm text-white leading-tight">© 2025 Arkiv</span>
              <span className="font-mono text-sm text-white leading-tight">All rights reserved</span>
            </div>
          </div>
        </div>
      </section>
    </div>
  );
}

export default function Playground() {
  return (
    <ThemeProvider>
      <PlaygroundContent />
    </ThemeProvider>
  );
}